# -*- coding: utf-8 -*-
"""DS340W Final Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16mp61kw1pghDwZk6CJVeYfCpsNEUAp9Y

# 新段落
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from scipy import stats as stat

cpy = pd.read_csv('/content/Company.csv')
cpy_tweet = pd.read_csv('/content/Company_Tweet.csv')
tweet = pd.read_csv('/content/Tweet.csv')

cpy

cpy_tweet

tweet

tweets = pd.merge(tweet,cpy_tweet,on='tweet_id',how='inner')
tweets.head()

tweets['post_date'] = pd.to_datetime(tweets['post_date'], unit='s')

tweets['date'] = pd.to_datetime(tweets['post_date'].apply(lambda date: date.date()))

tweets['date'].head()

#tweets = tweets.loc[(tweets['date'] >= '2018-09-01')
#                     & (tweets['date'] < '2019-09-15')]

#tweets

tweets.info()

tweets = tweets.drop(['tweet_id'],axis=1)

tweets.isna().sum()

tweets.ticker_symbol.value_counts()

aapl = tweets[tweets['ticker_symbol'] == 'AAPL']
tsla = tweets[tweets['ticker_symbol'] == 'TSLA']
amzn = tweets[tweets['ticker_symbol'] == 'AMZN']
msft = tweets[tweets['ticker_symbol'] == 'MSFT']
goog = tweets[tweets['ticker_symbol'] == 'GOOG']
googl = tweets[tweets['ticker_symbol'] == 'GOOGL'] ## With stockholders voting rights

!pip install yfinance

import yfinance as yf

tsla_stock = yf.Ticker('TSLA')

start = min(tsla['date'])
end = max(tsla['date'])

tsla_stock = tsla_stock.history(start=start.date(), end=end.date())

tsla_stock

aapl_stock = yf.Ticker("AAPL").history(start=min(aapl['date']).date(),end=max(aapl['date']).date())
amzn_stock = yf.Ticker("AMZN").history(start=min(amzn['date']).date(),end=max(amzn['date']).date())
googl_stock = yf.Ticker("GOOGL").history(start=min(googl['date']).date(),end=max(googl['date']).date())
msft_stock = yf.Ticker("MSFT").history(start=min(msft['date']).date(),end=max(msft['date']).date())

def tweet_vol_affect(tweets,stocks,title):
    tweet_shift1 = tweets.groupby('date').size().shift(-1).dropna() 
    stock_data = stocks['Volume'].dropna()
    corr, pval = stat.spearmanr(tweet_shift1.reindex(stock_data.index), stock_data,nan_policy='omit')
    tweets_vol = tweets.groupby('date').size().rolling(30).mean().dropna()
    stocks_data = stocks['Volume'].rolling(30).mean().dropna()
    fig = plt.figure(figsize=(16,8))
    ax1 = fig.add_subplot()
    ax2 = fig.add_subplot()
    ax2 = ax1.twinx()
    ax1.plot(tweets_vol.index,tweets_vol,label='Tweet Volume')
    ax2.plot(stocks_data.index,stocks_data,color='orange',label='Trade Volume')
    ax2.set_title(title+" \n Spearman correlation: corr={0:.5f} pval={1:.5f}".format(corr,pval))
    
    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines + lines2, labels + labels2, loc=0)
    plt.show()

tweet_vol_affect(tsla,tsla_stock,"Tesla")

tweet_vol_affect(aapl,aapl_stock,"Apple")

tweet_vol_affect(amzn,amzn_stock,"Amazon")

tweet_vol_affect(googl,googl_stock,"Google")

tweet_vol_affect(msft,msft_stock,"Microsoft")

"""Classifying positive and negative tweets¶"""

!pip install afinn

from afinn import Afinn
afinn = Afinn()

tsla['score'] =  tsla['body'].apply(lambda tweet: afinn.score(tweet))
aapl['score'] =  aapl['body'].apply(lambda tweet: afinn.score(tweet))
amzn['score'] =  amzn['body'].apply(lambda tweet: afinn.score(tweet))
msft['score'] =  msft['body'].apply(lambda tweet: afinn.score(tweet))
googl['score'] =  googl['body'].apply(lambda tweet: afinn.score(tweet))

tsla.score.plot(kind='hist',range=(-5,5),bins=40,edgecolor='black');

amzn.score.plot(kind='hist',range=(-5,5),bins=40,edgecolor='black');

googl.score.plot(kind='hist',range=(-5,5),bins=40,edgecolor='black');

msft.score.plot(kind='hist',range=(-5,5),bins=40,edgecolor='black');

def sentiment_overtime(tweets,stock,title):
    visual= tweets.groupby('date')['score'].mean().shift(-1).rolling(30).mean().dropna()
    corr_test = tweets.groupby('date')['score'].mean().shift(-1).dropna()
    corr, pval = stat.spearmanr(corr_test.reindex(stock.index), stock['Open'],nan_policy='omit')

    fig = plt.figure(figsize=(16,8))
    ax1 = fig.add_subplot()
    ax2 = fig.add_subplot()
    ax2 = ax1.twinx()
    
    ax1.plot(visual.index,visual,label='Tweets Sentiment')
    ax2.plot(stock.index,stock['Close'],color='orange',label='share price')
    ax2.set_title("Effects of "+title+" tweets to shareprice" +"\n Spearman correlation: corr={0:.5f} pval={1:.5f}".format(corr,pval))
    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines + lines2, labels + labels2, loc=0)
    plt.show()

sentiment_overtime(tsla,tsla_stock,"Tesla");

sentiment_overtime(amzn,amzn_stock,"Amazon");

sentiment_overtime(msft,msft_stock,"Mircosoft");

sentiment_overtime(googl,googl_stock,"Google");

sentiment_overtime(aapl,aapl_stock,"Apple");